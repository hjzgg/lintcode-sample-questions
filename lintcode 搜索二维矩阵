题目链接：http://www.lintcode.com/zh-cn/problem/search-a-2d-matrix/
搜索二维矩阵 查看运行结果 

写出一个高效的算法来搜索 m × n矩阵中的值。

这个矩阵具有以下特性：

每行中的整数从左到右是排序的。
每行的第一个数大于上一行的最后一个整数。
样例
考虑下列矩阵：

[
  [1, 3, 5, 7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
给出 target = 3，返回 true

挑战
O(log(n) + log(m)) 时间复杂度

class Solution {
public:
    /**
     * @param matrix, a list of lists of integers
     * @param target, an integer
     * @return a boolean, indicate whether matrix contains target
     */
    int n, m;
    
    int search_row(vector<vector<int> > &g, int t){
        int ld=0, rd=n-1;
        while(ld<=rd){
            int mid = (ld+rd)>>1;
            if(g[mid][0] > t)
                rd = mid-1;
            else ld = mid+1;
        }
        return ld-1;
    }
    
    bool search_col(vector<vector<int> > &g, int row, int t){
        int ld=0, rd=m-1;
        while(ld<=rd){
            int mid = (ld+rd)>>1;
            if(g[row][mid] > t)
                rd = mid=1;
            else if(g[row][mid] < t)
                ld = mid+1;
            else return true;
        }
        return false;
    }
    
    bool searchMatrix(vector<vector<int> > &g, int target) {
        // write your code here
        n = g.size();
        if(n==0) return false;
        m = g[0].size();
        int row = search_row(g, target);//首先找到这个数在哪一行
        if(row < 0) return false;
        if(search_col(g, row, target)) return true;//在确定这个数在那一列
        return false;
    }
};

