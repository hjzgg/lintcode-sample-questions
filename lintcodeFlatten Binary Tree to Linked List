Flatten Binary Tree to Linked List

Flatten a binary tree to a fake "linked list" in pre-order traversal.

Here we use the right pointer in TreeNode as the next pointer in ListNode.

样例
              1
               \
     1          2
    / \          \
   2   5    =>    3
  / \   \          \
 3   4   6          4
                     \
                      5
                       \
                        6
注意
Don't forget to mark the left child of each node to null. Or you will get Time Limit Exceeded or Memory Limit Exceeded.

挑战
Do it in-place without any extra memory.

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    void flatten(TreeNode *root) {
    	if(root){
    		flatten(root->left);
    		flatten(root->right);
			TreeNode* tmp = root->left;
			root->left = root->right;
			root->right = tmp; 
			tmp = root;
			while(tmp->right)
				tmp = tmp->right;
			tmp->right = root->left;
			root->left = NULL;
    	}
    }
};
