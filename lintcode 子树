题目链接：http://www.lintcode.com/zh-cn/problem/subtree/
子树 查看运行结果 

有两个不同大小的二进制树： T1 有上百万的节点； T2 有好几百的节点。请设计一种算法，判定 T2 是否为 T1的子树。

样例
下面的例子中 T2 是 T1 的子树：

       1                3
      / \              / 
T1 = 2   3      T2 =  4
        /
       4
下面的例子中 T2 不是 T1 的子树：

       1               3
      / \               \
T1 = 2   3       T2 =    4
        /
       4
注意
若 T1 中存在从节点 n 开始的子树与 T2 相同，我们称 T2 是 T1 的子树。也就是说，如果在 T1 节点 n 处将树砍断，砍断的部分将与 T2 完全相同。

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */
class Solution {
public:
    /**
     * @param T1, T2: The roots of binary tree.
     * @return: True if T2 is a subtree of T1, or false.
     */
    
    bool dfsTree(TreeNode *T1, TreeNode *T2){
        if(T2){
            if(!T1) return false;
            if(T1->val != T2->val) return false;
            if(!dfsTree(T1->left, T2->left)) return false;
            if(!dfsTree(T1->right, T2->right)) return false;
            return true;
        } else if(!T1 && !T2){
            return true;
        } else {//也就是说子树必须是由T1的某个节点开始到最下面的叶节点
            return false;
        }
    }
    
    bool isSubtree(TreeNode *T1, TreeNode *T2) {
        // write your code here
        if(T2==NULL) return true;
        else if(T1){
            if(T1->val == T2->val && dfsTree(T1, T2))
                return true;
            else {
                if(isSubtree(T1->left, T2)) return true;
                if(isSubtree(T1->right, T2)) return true;
            }
        }
        return false;
    }
};
