


给一组整数，按照升序排序，使用选择排序，冒泡排序，插入排序或者任何 O(n2) 的排序算法。
您在真实的面试中是否遇到过这个题？
样例

对于数组 [3, 2, 1, 4, 5], 排序后为：[1, 2, 3, 4, 5]。
选择排序
public class Solution {
    /**
     * @param A an integer array
     * @return void
     */
    public void sortIntegers(int[] a) {
        int len = a.length; 
        for(int i=0; i<len-1; ++i) {
            int p = i;
            for(int j=i+1; j<len; ++j) 
                if(a[p] > a[j]) {
                    p = j;
                }
            if(p != i) {
                a[i] ^= a[p];
                a[p] ^= a[i];
                a[i] ^= a[p];
            }
        }
    }
}

选择排序
public class Solution {
    /**
     * @param A an integer array
     * @return void
     */
    public void sortIntegers(int[] a) {
        int len = a.length; 
        for(int i=0; i<len-1; ++i)
            for(int j=i+1; j<len; ++j)
                if(a[i] > a[j]) {
                    a[i] ^= a[j];
                    a[j] ^= a[i];
                    a[i] ^= a[j];
                }
    }
}

冒泡排序
public class Solution {
    /**
     * @param A an integer array
     * @return void
     */
    public void sortIntegers(int[] a) {
        int len = a.length; 
        for(int i=len-1; i>0; --i) {
            for(int j=0; j<i; ++j) {
                if(a[j] > a[j+1]) {
                    a[j] ^= a[j+1];
                    a[j+1] ^= a[j];
                    a[j] ^= a[j+1];
                }
            }
        }
    }
}

插入排序
public class Solution {
    /**
     * @param A an integer array
     * @return void
     */
    public void sortIntegers(int[] a) {
        int len = a.length; 
        for(int i=1; i<len; ++i) {
            int tmp = a[i];
            int j = 0;
            for(j=i-1; j>=0 && tmp < a[j]; --j)
                a[j+1] = a[j];
            a[j+1] = tmp;
        }
    }
}


二分插入排序
public class Solution {
    /**
     * @param A an integer array
     * @return void
     */
    public void sortIntegers(int[] a) {
        int len = a.length; 
        for(int i=1; i<len; ++i) {
            int key = a[i];
            int pos = bsearch(a, i-1, key);
            for(int j=i; j>pos; --j)
                a[j] = a[j-1];
            a[pos] = key;
        }
    }
    
    private int bsearch(int[] a, int len, int key) {
        int ld = 0, rd = len;
        while(ld <= rd) {
            int mid = (ld+rd)>>1;
            if(a[mid] <= key) {
                ld = mid+1;
            } else {
                rd = mid-1;
            }
        }
        return rd+1;
    }
}
